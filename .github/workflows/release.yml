name: Release

on:
  push:
    branches: ["main"]

env:
  BUILD_TYPE: Release
  GH_TOKEN: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}
  PYTHONUTF8: 1

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write
  packages: write

jobs:
  versioning:
    name: Semantic Release
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Set up Cargo
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - run: npm install --ignore-scripts --save-dev --prefix ./package-ci @semantic-release/exec @semantic-release/git conventional-changelog-eslint semantic-release && npx --prefix ./package-ci semantic-release

  rebase:
    name: Rebase Dev. Branch
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: versioning
    steps:
      - name: Checkout the latest code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Perform rebase
        run: |
          git fetch origin main
          git checkout main-dev
          git rebase origin/main

      - name: Push changes
        uses: CasperWA/push-protected@v2
        with:
          token: ${{ secrets.SEMANTIC_REBASE_TOKEN }}
          branch: main-dev
          unprotect_reviews: True
          force: True

  build_wheels:
    name: Build Python ${{ matrix.python-version }} for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: versioning
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["36", "37", "38", "39", "310", "311", "312"]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: "main"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Setup QEMU
        if: matrix.os == 'ubuntu-latest' # We only need QEMU for Linux builds
        uses: docker/setup-qemu-action@v3
      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel
      - name: Build wheels
        run: cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD: cp${{ matrix.python-version }}-*
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl
          overwrite: true

  publish_python:
    name: Publish Python
    needs: build_wheels
    runs-on: ubuntu-20.04
    environment:
      name: pypi
      url: https://pypi.org/p/stringzilla
    permissions:
      id-token: write

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          # unpacks all CIBW artifacts into dist/
          pattern: cibw-*
          path: dist
          merge-multiple: true

      - name: Publish to PyPi
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
          verbose: true
          print-hash: true

  publish_rust:
    name: Publish Rust
    runs-on: ubuntu-22.04
    needs: versioning
    steps:
      - uses: actions/checkout@v4
        with:
          ref: "main"
      - run: git submodule update --init --recursive
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - uses: katyo/publish-crates@v2
        with:
          registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  # Let's not publish the JavaScript package for now
  # publish_javascript:
  #   name: Publish JavaScript
  #   needs: versioning
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         ref: 'main'
  #     - run: git submodule update --init --recursive
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: 18
  #     - run: npm install
  #     - run: npm ci
  #     - run: npm test
  #     - uses: JS-DevTools/npm-publish@v2
  #       with:
  #         token: ${{ secrets.NPM_TOKEN }}

  create_linux_deb_package:
    name: Create Debian Package for ${{ matrix.arch }}
    runs-on: ubuntu-22.04
    needs: versioning
    env:
      CC: clang-16
      CXX: clang++-16
      AR: llvm-ar
      NM: llvm-nm
      RANLIB: llvm-ranlib

    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: amd64
            target: x86_64-linux-gnu
          - arch: arm64
            target: aarch64-linux-gnu

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
          ref: "main"

      - name: Get version
        id: set_version
        run: |
          version=$(cat VERSION)
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y make build-essential crossbuild-essential-arm64 crossbuild-essential-armhf  libjemalloc-dev
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 16

      - name: Build C/C++
        run: |
          # Configure and build the project
          cmake -B build_release \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=1 \
            -DCMAKE_C_COMPILER_TARGET=${{ matrix.target }} \
            -DCMAKE_CXX_COMPILER_TARGET=${{ matrix.target }} \
            -DCMAKE_SYSTEM_NAME=Linux \
            -DCMAKE_SYSTEM_PROCESSOR=${{ matrix.arch }} \
            -DSTRINGZILLA_BUILD_SHARED=1 \
            -DSTRINGZILLA_BUILD_BENCHMARK=1 \
            -DSTRINGZILLA_BUILD_TEST=1

          cmake --build build_release --config Release

          cp build_release/libstringzillite.so "stringzillite_linux_${{ matrix.arch }}_${{ steps.set_version.outputs.version }}.so"
          mkdir -p "stringzillite_linux_${{ matrix.arch }}_${{ steps.set_version.outputs.version }}/DEBIAN"
          touch "stringzillite_linux_${{ matrix.arch }}_${{ steps.set_version.outputs.version }}/DEBIAN/control"
          mkdir -p "stringzillite_linux_${{ matrix.arch }}_${{ steps.set_version.outputs.version }}/usr/local/lib"
          mkdir "stringzillite_linux_${{ matrix.arch }}_${{ steps.set_version.outputs.version }}/usr/local/include"
          cp include/stringzilla/stringzilla.h "stringzillite_linux_${{ matrix.arch }}_${{ steps.set_version.outputs.version }}/usr/local/include/"
          cp build_release/libstringzillite.so "stringzillite_linux_${{ matrix.arch }}_${{ steps.set_version.outputs.version }}/usr/local/lib/"
          echo -e "Package: stringzilla\nVersion: ${{ steps.set_version.outputs.version }}\nMaintainer: Ash Vardanian\nArchitecture: ${{ matrix.arch }}\nDescription: SIMD-accelerated string search, sort, hashes, fingerprints, & edit distances" > "stringzillite_linux_${{ matrix.arch }}_${{ steps.set_version.outputs.version }}/DEBIAN/control"
          dpkg-deb --build "stringzillite_linux_${{ matrix.arch }}_${{ steps.set_version.outputs.version }}"

      - name: Upload library
        uses: xresloader/upload-to-github-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          file: "*.so"
          update_latest_release: true

      - name: Upload archive
        uses: xresloader/upload-to-github-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          file: "*.deb"
          update_latest_release: true

  create_windows_dll_library:
    name: Create Dll Library for Windows ${{ matrix.arch }}
    runs-on: windows-2022
    needs: versioning
    strategy:
      fail-fast: false
      matrix:
        arch: [x64, x86]
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
          ref: "main"
      - run: git submodule update --init --recursive

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1.13

      - name: Setup MinGW
        uses: egor-tensin/setup-mingw@v2
        with:
          platform: ${{ matrix.arch }}
          version: 12.2.0

      - name: Get version
        id: set_version
        shell: bash
        run: |
          version=$(cat VERSION)
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Build library
        run: |
          cmake -DCMAKE_BUILD_TYPE=Release -B build_release
          cmake --build build_release --config Release
          tar -cvf "stringzillite_windows_${{ matrix.arch }}_${{ steps.set_version.outputs.version }}.tar" "build_release/stringzillite.dll" "./include/stringzilla/stringzilla.h"

      - name: Upload archive
        uses: xresloader/upload-to-github-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          file: "stringzillite_windows_${{ matrix.arch }}_${{ steps.set_version.outputs.version }}.tar"
          update_latest_release: true

  create_macos_library:
    name: Create Library for MacOS ${{ matrix.arch }}
    runs-on: macos-12
    needs: versioning
    strategy:
      fail-fast: false
      matrix:
        arch: [arm64, x86_64]
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
          ref: "main"
      - run: git submodule update --init --recursive

      - name: Get version
        id: set_version
        run: |
          version=$(cat VERSION)
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Build library
        run: |
          cmake -DCMAKE_BUILD_TYPE=Release -B build_release
          cmake --build build_release --config Release        
          zip -r stringzillite_macos_${{ matrix.arch }}_${{ steps.set_version.outputs.version }}.zip build_release/libstringzillite.dylib include/stringzilla/stringzilla.h

      - name: Upload archive
        uses: xresloader/upload-to-github-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          file: "*.zip"
          update_latest_release: true
