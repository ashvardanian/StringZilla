cmake_minimum_required(VERSION 3.1)
project(
  stringzilla
  VERSION 2.0.4
  LANGUAGES C CXX
  DESCRIPTION "Crunch multi-gigabyte strings with ease"
  HOMEPAGE_URL "https://github.com/ashvardanian/stringzilla")

set(CMAKE_C_STANDARD 99)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_COMPILE_WARNING_AS_ERROR)
set(DEV_USER_NAME $ENV{USER})

# Set a default build type to "Release" if none was specified
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS "Setting build type to 'Release' as none was specified.")
  set(CMAKE_BUILD_TYPE
    Release
    CACHE STRING "Choose the type of build." FORCE)
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release"
    "MinSizeRel" "RelWithDebInfo")
endif()

# Determine if StringZilla is built as a subproject (using `add_subdirectory`)
# or if it is the main project
set(STRINGZILLA_IS_MAIN_PROJECT OFF)

if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
  set(STRINGZILLA_IS_MAIN_PROJECT ON)
endif()

# Installation options
option(STRINGZILLA_INSTALL "Install CMake targets" OFF)
option(STRINGZILLA_BUILD_TEST "Compile a native unit test in C++"
  ${STRINGZILLA_IS_MAIN_PROJECT})
option(STRINGZILLA_BUILD_BENCHMARK "Compile a native benchmark in C++"
  ${STRINGZILLA_IS_MAIN_PROJECT})
option(STRINGZILLA_BUILD_SHARED "Compile a dynamic library" ${STRINGZILLA_IS_MAIN_PROJECT})
set(STRINGZILLA_TARGET_ARCH
  ""
  CACHE STRING "Architecture to tell the compiler to optimize for (-march)")

# Includes
set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake ${CMAKE_MODULE_PATH})
include(ExternalProject)
include(CheckCSourceCompiles)

# Allow CMake 3.13+ to override options when using FetchContent /
# add_subdirectory
if(POLICY CMP0077)
  cmake_policy(SET CMP0077 NEW)
endif()

# Configuration
include(GNUInstallDirs)
set(STRINGZILLA_TARGET_NAME ${PROJECT_NAME})
set(STRINGZILLA_INCLUDE_BUILD_DIR "${PROJECT_SOURCE_DIR}/include/")

# Define our library
add_library(${STRINGZILLA_TARGET_NAME} INTERFACE)
add_library(${PROJECT_NAME}::${STRINGZILLA_TARGET_NAME} ALIAS ${STRINGZILLA_TARGET_NAME})

target_include_directories(
  ${STRINGZILLA_TARGET_NAME}
  INTERFACE $<BUILD_INTERFACE:${STRINGZILLA_INCLUDE_BUILD_DIR}>
  $<INSTALL_INTERFACE:include>)

if(STRINGZILLA_INSTALL)
  install(
    TARGETS ${STRINGZILLA_TARGET_NAME}
    EXPORT ${STRINGZILLA_TARGETS_EXPORT_NAME}
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    INCLUDES
    DESTINATION ${STRINGZILLA_INCLUDE_INSTALL_DIR})
  install(DIRECTORY ${STRINGZILLA_INCLUDE_BUILD_DIR}
    DESTINATION ${STRINGZILLA_INCLUDE_INSTALL_DIR})
endif()

if(${CMAKE_VERSION} VERSION_EQUAL 3.13 OR ${CMAKE_VERSION} VERSION_GREATER 3.13)
  include(CTest)
  enable_testing()
endif()

# Function to set compiler-specific flags
function(set_compiler_flags target cpp_standard)
  target_include_directories(${target} PRIVATE scripts)
  target_link_libraries(${target} PRIVATE ${STRINGZILLA_TARGET_NAME})
  target_compile_definitions(${target} PUBLIC DEV_USER_NAME=${DEV_USER_NAME})
  set_target_properties(${target} PROPERTIES RUNTIME_OUTPUT_DIRECTORY
    ${CMAKE_BINARY_DIR})

  # Set the C++ standard
  if(NOT ${cpp_standard} STREQUAL "")
    target_compile_features(${target} PUBLIC cxx_std_${cpp_standard})
  endif()

  # Maximum warnings level & warnings as error Allow unknown pragmas
  target_compile_options(
    ${target}
    PRIVATE
    "$<$<CXX_COMPILER_ID:MSVC>:/W4;/WX>" # For MSVC, /WX is sufficient
    "$<$<CXX_COMPILER_ID:GNU>:-Wall;-Wextra;-pedantic;-Werror;-Wfatal-errors;-Wno-unknown-pragmas;-Wno-cast-function-type;-Wno-unused-function>"
    "$<$<CXX_COMPILER_ID:Clang>:-Wall;-Wextra;-pedantic;-Werror;-Wfatal-errors;-Wno-unknown-pragmas>"
    "$<$<CXX_COMPILER_ID:AppleClang>:-Wall;-Wextra;-pedantic;-Werror;-Wfatal-errors;-Wno-unknown-pragmas>"
  )

  # Set optimization options for different compilers differently
  target_compile_options(
    ${target}
    PRIVATE
    "$<$<AND:$<CXX_COMPILER_ID:GNU>,$<CONFIG:Release>>:-O3>"
    "$<$<AND:$<CXX_COMPILER_ID:GNU>,$<OR:$<CONFIG:Debug>,$<CONFIG:RelWithDebInfo>>>:-g>"
    "$<$<AND:$<CXX_COMPILER_ID:Clang>,$<CONFIG:Release>>:-O3>"
    "$<$<AND:$<CXX_COMPILER_ID:Clang>,$<OR:$<CONFIG:Debug>,$<CONFIG:RelWithDebInfo>>>:-g>"
    "$<$<AND:$<CXX_COMPILER_ID:MSVC>,$<CONFIG:Release>>:/O2>"
    "$<$<AND:$<CXX_COMPILER_ID:MSVC>,$<OR:$<CONFIG:Debug>,$<CONFIG:RelWithDebInfo>>>:/Zi>"
  )

  # Check for STRINGZILLA_TARGET_ARCH and set it or use "march=native"
  # if not defined
  if(STRINGZILLA_TARGET_ARCH STREQUAL "")
    # MSVC does not have a direct equivalent to -march=native
    target_compile_options(
      ${target} PRIVATE "$<$<CXX_COMPILER_ID:GNU,Clang>:-march=native>")
  else()
    target_compile_options(
      ${target}
      PRIVATE
      "$<$<CXX_COMPILER_ID:GNU,Clang>:-march=${STRINGZILLA_TARGET_ARCH}>"
      "$<$<CXX_COMPILER_ID:MSVC>:/arch:${STRINGZILLA_TARGET_ARCH}>")

    # Sanitizer options for Debug mode
    if(CMAKE_BUILD_TYPE STREQUAL "Debug")
      target_compile_options(
        ${target}
        PRIVATE
        "$<$<CXX_COMPILER_ID:GNU,Clang>:-fsanitize=address;-fsanitize=address;-fsanitize=leak>"
        "$<$<CXX_COMPILER_ID:MSVC>:/fsanitize=address>")
    endif()
  endif()
endfunction()

function(define_launcher exec_name source cpp_standard)
  add_executable(${exec_name} ${source})
  set_compiler_flags(${exec_name} ${cpp_standard})
  add_test(NAME ${exec_name} COMMAND ${exec_name})
endfunction()

if(${STRINGZILLA_BUILD_BENCHMARK})
  define_launcher(stringzilla_bench_search scripts/bench_search.cpp 17)
  define_launcher(stringzilla_bench_similarity scripts/bench_similarity.cpp 17)
  define_launcher(stringzilla_bench_sort scripts/bench_sort.cpp 17)
  define_launcher(stringzilla_bench_token scripts/bench_token.cpp 17)
  define_launcher(stringzilla_bench_container scripts/bench_container.cpp 17)
endif()

if(${STRINGZILLA_BUILD_TEST})
  define_launcher(stringzilla_test_cpp11 scripts/test.cpp 11)
  define_launcher(stringzilla_test_cpp14 scripts/test.cpp 14)
  define_launcher(stringzilla_test_cpp17 scripts/test.cpp 17)
  define_launcher(stringzilla_test_cpp20 scripts/test.cpp 20)
endif()

if(${STRINGZILLA_BUILD_SHARED})
  add_library(stringzilla_shared SHARED c/lib.c)
  set_compiler_flags(stringzilla_shared "")
  set_target_properties(stringzilla_shared PROPERTIES
    VERSION ${PROJECT_VERSION}
    SOVERSION 1
    PUBLIC_HEADER include/stringzilla/stringzilla.h)
endif()